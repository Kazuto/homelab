version: "3.3"

services:
  emby:
    image: emby/embyserver:latest
    container_name: emby
    #runtime: nvidia # Expose NVIDIA GPUs
    #network_mode: host # Enable DLNA and Wake-on-Lan
    ports:
      - ${EMBY_HTTP_PORT}:8096 # HTTP port
      - ${EMBY_HTTPS_PORT}:8920 # HTTPS port
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 6G
        reservations:
          cpus: '1'
          memory: 1G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    labels:
      traefik.enable: true
      traefik.http.routers.emby.rule: Host(`7428b493ccb3325b73789e686db40bf3.${DOMAIN}`) || Host(`emby.${DOMAIN}`)
      traefik.http.routers.emby.entrypoints: websecure
      traefik.http.routers.emby.tls: true
      traefik.http.routers.emby.tls.certresolver: letsencrypt
      traefik.http.services.emby.loadbalancer.server.port: 8096
      traefik.port: 8096
      # traefik.http.routers.emby.middlewares=basic-auth@docker"
    volumes:
      - ${DOCKER_DATA_DIR}/emby/config:/config
      - ${DOCKER_DATA_DIR}/emby/themes:/system/dashboard-ui/modules/themes
      - /f/backup/emby:/mnt/backup # Backup directory
      - /d/movies:/mnt/movies # Media directory
      - /e/shows:/mnt/shows # Media directory
      - /e/anime:/mnt/anime # Media directory
      - /e/audio_books:/mnt/audio_books # Media directory
    #devices:
    #  - /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes
    #  - /dev/vchiq:/dev/vchiq # MMAL/OMX on Raspberry Pi
    networks:
      - web
    restart: unless-stopped

  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    #runtime: nvidia # Expose NVIDIA GPUs
    #network_mode: host # Enable DLNA and Wake-on-Lan
    ports:
      - ${JELLYFIN_HTTP_PORT}:8096 # HTTP port
      - ${JELLYFIN_HTTPS_PORT}:8920 # HTTPS port
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 6G
        reservations:
          cpus: '1'
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    labels:
      traefik.enable: true
      traefik.http.routers.jellyfin.rule: Host(`jelly.${DOMAIN}`)
      traefik.http.routers.jellyfin.entrypoints: websecure
      traefik.http.routers.jellyfin.tls: true
      traefik.http.routers.jellyfin.tls.certresolver: letsencrypt
      traefik.http.services.jellyfin.loadbalancer.server.port: 8096
      traefik.port: 8096
    volumes:
      - ${DOCKER_DATA_DIR}/jellyfin/config:/config
      - ${DOCKER_DATA_DIR}/jellyfin/cache:/cache
      - /f/backup/jellyfin:/mnt/backup # Backup directory
      - /d/movies:/mnt/movies # Media directory
      - /e/shows:/mnt/shows # Media directory
      - /e/anime:/mnt/anime # Media directory
      - /e/audio_books:/mnt/audio_books # Media directory
    #devices:
    #  - /dev/dri:/dev/dri # VAAPI/NVDEC/NVENC render nodes
    #  - /dev/vchiq:/dev/vchiq # MMAL/OMX on Raspberry Pi
    networks:
      - web
    restart: unless-stopped
   
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      TZ: ${TZ}
    labels:
      traefik.enable: true
      traefik.http.routers.sonarr.rule: Host(`9ddb2697ec3311eedd470d790104b4a7.${DOMAIN}`)
      traefik.http.routers.sonarr.entrypoints: websecure
      traefik.http.routers.sonarr.tls: true
      traefik.http.routers.sonarr.tls.certresolver: letsencrypt
      traefik.http.services.sonarr.loadbalancer.server.port: 8989
      traefik.port: 8989
    ports:
      - ${SONARR_HTTP_PORT}:8989
    volumes:
      - '${DOCKER_DATA_DIR}/sonarr/data:/config'
      - '/e/shows/:/tv'
      - '/e/anime/:/anime'
      - '${DOCKER_DATA_DIR}/sonarr/downloadclient-downloads:/downloads'
    networks:
      - web
    restart: unless-stopped

  sabnzbd:
    image: linuxserver/sabnzbd:latest
    container_name: sabnzbd
    labels:
      traefik.enable: true
      traefik.http.routers.sabnzbd.rule: Host(`c22c230d554fcdde10136d735191c304.${DOMAIN}`) || Host(`nzb.${DOMAIN}`)
      traefik.http.routers.sabnzbd.entrypoints: websecure
      traefik.http.routers.sabnzbd.tls: true
      traefik.http.routers.sabnzbd.tls.certresolver: letsencrypt
      traefik.http.services.sabnzbd.loadbalancer.server.port: 8080
      traefik.port: 8080
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    ports:
      - ${SABNZBD_HTTP_PORT}:8080
    volumes:
      - ${DOCKER_DATA_DIR}/sabnzbd:/config
      # - '${DOCKER_DATA_DIR}/sabnzbd:/datadir'
      - '/f/downloads:/Downloads'
    networks:
      - web
    restart: unless-stopped

  calibre:
    # image: linuxserver/calibre:6.13.0
    image: linuxserver/calibre-web:latest
    container_name: calibre
    labels:
      traefik.enable: true
      traefik.http.routers.calibre.rule: Host(`3f11e0e7d95a11095e4c54ce5515e60b.${DOMAIN}`)
      traefik.http.routers.calibre.entrypoints: websecure
      traefik.http.routers.calibre.tls: true
      traefik.http.routers.calibre.tls.certresolver: letsencrypt
      traefik.http.services.calibre.loadbalancer.server.port: 8083
      traefik.port: 8083
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/mods:universal-calibre #optional
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    ports:
      - ${CALIBRE_HTTP_PORT}:8083
    volumes:
      - '${DOCKER_DATA_DIR}/calibre/config:/config'
      - '/f/_shared/library:/books'
    networks:
      - web
    restart: unless-stopped

networks:
  web:
    name: traefik_web